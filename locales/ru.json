{
    "-------------------------------------------------MAIN-PAGE------------------------------------------------------------":"",
    "1":"HEADER",

    "main": "ГЛАВНАЯ",
    "start": "СТАРТ",
    "libraries": "БИБЛИОТЕКИ",
    "course": "УЧЕБНИК",
    "wiki": "ВИКИ",

    "2":"MAIN-BOX",

    "its-easy":" - это просто",
    "its-not-scary": "не так страшно как кажется",
    "our-guide": "наш справочник поможет с этим",
    "you`ll-find": "ВЫ НАЙДЕТЕ",
    "online-code-editor": "Онлайн редактор кода",
    "brief-overview-of-libraries": "Кратко о библиотеках",
    "even-beginners-will-understand": "Поймут даже чайники",
    "online-compiler": "Онлайн компилятор",

    "3":"INFORMATION-ABOUT-C",

    "history-of": "История языка ",
    "above-the-language": "Над языком",
    "first-part-of-text": "с 1969 по 1973 год работали инженеры Кен Томпсон и Деннис Ритчи из американской компании Bell Labs. До этого языки высокого уровня были очень ограниченными и не позволяли делать многие вещи, ставшие сегодня привычными. Многие функции разработчикам приходилось писать на ассемблере или на уровне машинного кода. Такой подход замедлял разработку и требовал глубоких знаний о том, как работает железо.",
    "second-part-of-text": "Согласно одной из легенд, у Ритчи была любимая компьютерная игра, которую он запускал на сервере компании. Ритчи захотел перенести игру на рабочий компьютер, но на нем не было операционной системы. Поэтому он решил переписать уже имеющуюся ОС, которая была полностью написана на ассемблере, на высокоуровневый язык Би. В итоге оказалось, что возможности Би не позволяют использовать все особенности компьютера, поэтому было решено создать свой язык программирования. Так и появился Си.",
    "third-part-of-text": "Язык C стал популярным в основном из-за его широкого применения в операционной системе UNIX, на базе которой разрабатывают дистрибутивы Linux.",

    "4":"MINIBOX-WITH-ICONS",

    "what-you-need":"ЧТО ТЕБЕ ПОНАДОБИТСЯ",
    "pc-or-laptop":"ПК или Ноутбук",
    "a-lot-of-your-time":"Много твоего Времени",
    "patience":"усидчивости",
    "positive-attitude":"Позитивный настрой",
    "and-a-bit-of-brains":"И немножко Мозгов",

    "5":"MINIBOX-WITH-ICONS",

    "hello-world":" 'Hello World' - на ",
    "how-it-looks-like":"Вот так выглядит код 'Hello World!'",
    "by-the-way":"к слову это активное ФОТО, попробуй код сам",
    "compiling-our-file":"Тут мы компилируем наш файл",
    "active":"(АКТИВНО)",
    "execution-code":"Вот запуск нашего кода",
    "easy":"Правда не сложно?",
    "press":"Жми ",
    "guide-below":" ниже и читай руководство для новичков",

    "6":"FOOTER",
    
    "language-C":"Язык C",
    "code-editor":"Редактор Кода",
    "compiler":"Компилятор",
    "writing-logic":"Логика Написания",
    "first-program":"Первая Программа",
    "more":"БОЛЬШЕ",
    "development":"Сайт находится на стадии РАЗРАБОТКИ",

    "-------------------------------------------------START-PAGE------------------------------------------------------------":"",

    "lets-get-started": "НАЧИНАЕМ",
    "history&origin": "История & Происхождение",
    "history": "Язык программирования C был разработан в начале 1970-х годов в лабораториях Bell Лабс Деннисом Ритчи. Изначально он был создан как системный язык программирования для разработки операционной системы Unix. Со временем язык C эволюционировал и оказал влияние на многие другие языки программирования, такие как C++, C# и Java.",
    "history2":"Его прочное наследие связано с эффективностью и близостью к аппаратному обеспечению, что сделало его основополагающим языком в информатике.",

    "advantages": "Плюсы Языка ",
    "head-of-high-perfomance":"Высокая Производительность",
    "high-perfomance": "близок к машинному коду, подходит для системного программирования.",
    "head-of-memory-control": "Контроль над Памятью",
    "memory-control": "позволяет работать с указателями и управлять памятью вручную.",
    "head-of-portability":"Портируемость",
    "portability": "программы на C можно легко перенести на разные платформы.",
    "head-of-wide-support-and-popularity":"Широкая Поддержка и Популярность",
    "wide-support-and-popularity": "компиляторы и библиотеки доступны практически везде.",
    "head-of-simplicity-and-structure":"Простота и Структурированность",
    "simplicity-and-structure": "минималистичный синтаксис и поддержка модульности через функции.",
    "features1":"Эти особенности делают ",
    "features2":" хорошим выбором для разработки операционных систем, драйверов и производительных приложений.",

    "on":" на ",
    "stdio":" - подключает стандартную библиотеку ввода-вывода Standard Input Output Library.",
    "int-main":" - объявляем функцию \"main\" без аргументов \"()\", она начинается с \"{\" и закрывается также с помощью \"}\".",
    "char":" - объявляем массив символов (строку), где а - это имя массива. Каждый элемент(буква) занимает свое место в массиве.",
    "printf":" - мы выводим наш массив на экран с помощью команды printf, где \"%s\" — это спецификатор, указывающий, что аргумент a, передаваемый в команду, является строкой.",
    "explanation":"Объяснение Кода",
    "intrested1":"Действительно, это не сложно! Заинтересовался? Посети также наши другие страницы ",
    "intrested2":", где ты найдешь много интересной и полезной информации.",

    "standart-libraries":"Стандартные Библиотеки",
    "definition":"ОПРЕДЕЛЕНИЕ",
    "useful-libraries":"В языке C стандартные библиотеки играют ключевую роль, предоставляя набор готовых функций и инструментов, которые помогают разработчикам писать программы быстрее, проще и с минимальными ошибками. Без использования библиотек программисты должны были бы вручную реализовывать базовые операции, такие как ввод и вывод, работу с памятью и строки, что существенно усложнило бы разработку. Чем они полезны:",
    "pre-simlification-of-development":"Упрощения разработки",
    "simplification-of-development":" — предоставляют готовые функции для базовых операций (ввод-вывод, работа с памятью), избавляя от необходимости реализовывать их вручную.",
    "pre-reliability-and-code-quality":"Надежности и качества кода",
    "reliability-and-code-quality":" — функции в библиотеках проверены и отлажены, что снижает вероятность ошибок.",
    "pre-portability-libraries":"Переносимости",
    "portability-libraries":" — стандартные библиотеки поддерживаются на всех основных платформах, что позволяет запускать код на разных системах.",
    "pre-perfomance-optimization":"Оптимизации производительности",
    "perfomance-optimization":" — библиотечные функции часто оптимизированы для быстрого выполнения.",
    "pre-simplification-of-OS-interaction":"Упрощения работы с ОС",
    "simplification-of-OS-interaction":" — предоставляют универсальные интерфейсы для работы с файлами, процессами и сигналами.",
    "pre-error-managment":"Управления ошибками",
    "error-managment":" — встроенные механизмы обработки ошибок, такие как \"errno\", делают программы более безопасными.",
    "pre-code-reduction":"Сокращения кода",
    "code-reduction":" — использование библиотек уменьшает объем кода, делая его более понятным и читаемым.",
    "library":"БИБЛИОТЕКА",

    "stdio.h":" (Standard Input/Output) — это стандартная библиотека в языке C, которая предоставляет функции для выполнения операций ввода и вывода. Она включает в себя функции для работы с консолью и файлами, позволяя программам получать данные от пользователя и выводить информацию на экран.",
    "main-functions":"Основные функции библиотеки ",
    "printf-function":" — вывод данных на экран.",
    "scanf-function":" — ввод данных с клавиатуры.",
    "fopen-fclose-function": " — открытие и закрытие файлов.",
    "fread-fwrite-function": " — чтение и запись данных в файлы.",
    "fprintf-fscanf-function": " — форматированный ввод и вывод для файлов.",
    "example-code":"Пример Кода",
    "example-code-stdio.h1":"Вот простой пример программы на C, использующей библиотеку ",
    "example-code-stdio.h2":", чтобы вводить и выводить данные:",
    "explanation-of-the-code":"Объяснение кода:",

    "....":"explanation of code STDIO.H",

    "stdio.h-explanation":" — директива препроцессора, которая подключает библиотеку <stdio.h>, позволяя использовать ее функции в программе.",
    "main-explanation":" — функция \"main\" является точкой входа в программу. Каждый C-программ начинается с этой функции.",
    "number-explanation":" — объявление переменной \"number\" типа \"int\" для хранения введенного целого числа.",
    "printf-enter-explanation":" — выводит сообщение на экран с просьбой ввести число.",
    "scanf-explanation":" — считывает введенное число с клавиатуры и сохраняет его в переменной \"number\". Символ \"&\" перед \"number\" означает \"адрес\" этой переменной, необходимый для корректной работы scanf.",
    "printf-entered-explanation":" — выводит на экран сообщение с введенным числом. \"%d\" — спецификатор формата для целого числа.",
    "return-0-explanation":" — завершает программу и возвращает 0, что обычно указывает на успешное выполнение.",

    "stdlib.h":" — это стандартная библиотека в языке C, которая предоставляет функции для выполнения общих утилитных операций, включая управление памятью, управление процессами, преобразования и многое другое. Она необходима для таких задач, как динамическое выделение памяти, генерация случайных чисел и преобразование между различными типами данных.",
    "malloc-calloc-realloc-free-function":" — функции для динамического выделения и освобождения памяти.",
    "exit-function":" — завершает программу и может вернуть статус выхода.",
    "atoi-atof-strtol-strtod-function":" — функции для преобразования строк в целые или плавающие числа.",
    "rand-srand-function":" — функции для генерации случайных чисел.",
    "system-function":" — выполняет системную команду.",
    "example-code-stdlib.h1":"Вот простой пример программы на C, которая использует библиотеку ",
    "example-code-stdlib.h2":" для динамического выделения памяти и выполнения основных операций:",
    "stdlib.h-explanation":" — директива препроцессора, которая подключает библиотеку <stdlib.h>, позволяя использовать ее функции в программе.",
    "int-array-explanation":" — объявляет указатель \"array\", который будет использоваться для указания на динамически выделенный массив целых чисел.",
    "int-size-explanation":" — объявляет переменную \"size\", чтобы хранить размер массива, введенный пользователем.",
    "printf-enter-size-of-array-explanation":" — запрашивает у пользователя ввести размер массива.",
    "scanf-d-explanation":" — считывает введенный размер и сохраняет его в переменной \"size\".",
    "array-int-malloc-explanation":" — динамически выделяет память для массива целых чисел заданного размера. Функция \"malloc\" возвращает указатель на выделенную память. Приведение типа \"(int *)\" обеспечивает соответствие типа указателя.",
    "array-NULL-explanation":" — проверяет, была ли успешной операция выделения памяти. Если \"malloc\" не удалась, она возвращает \"NULL\".",
    "printf-memory-explanation":" — выводит сообщение об ошибке, если выделение памяти не удалось.",
    "for-i-explanation":" — инициализирует цикл для заполнения массива четными числами.",
    "array[i]-explanation":" — присваивает значение четного числа каждому элементу массива.",
    "printf(array[d])-explanation":" — выводит индекс и значение каждого элемента массива.",
    "free(array)-explanation":" — освобождает выделенную память, чтобы избежать утечек памяти.",

    "string.h":" — это стандартная библиотека в языке C, которая предоставляет функции для работы со строками. Она включает в себя функции для манипуляции строками, сравнения строк, копирования и поиска подстрок, а также для вычисления длины строк.",
    "strlen-function":" — вычисляет длину строки.",
    "strcpy-funtion":" — копирует одну строку в другую.",
    "strncpy-function":" — копирует определенное количество символов из одной строки в другую.",
    "strcat-function":" — конкатенирует (добавляет) одну строку к другой.",
    "strcmp-function":" — сравнивает две строки.",
    "strchr-function":" — ищет первое вхождение символа в строке.",
    "strstr-function":" — ищет первое вхождение подстроки в строке.",
    "example-code-string.h1":"Вот простой пример программы на C, которая использует библиотеку ",
    "example-code-string.h2":" для работы со строками:",
    "1.string.h":" — директива препроцессора, которая подключает библиотеку <string.h>, позволяя использовать ее функции для работы со строками.",
    "2.string.h":" — объявление массивов символов для хранения строк. Массивы имеют размер 50 символов.",
    "3.string.h":" — запрашивает у пользователя ввод первой строки.",
    "4.string.h":" — считывает строку из стандартного ввода (клавиатуры) и сохраняет ее в массиве \"str1\".",
    "5.string.h":" — запрашивает у пользователя ввод второй строки.",
    "6.string.h":" — считывает строку из стандартного ввода и сохраняет ее в массиве \"str2\".",
    "7.string.h":" — удаляет символ новой строки из \"str1\", если он есть.",
    "8.string.h":" — удаляет символ новой строки из \"str2\", если он есть.",
    "9.string.h":" — сравнивает строки \"str1\" и \"str2\". Функция возвращает 0, если строки равны, отрицательное значение, если \"str1\" меньше \"str2\", и положительное значение, если \"str1\" больше \"str2\".",
    "10.string.h":" — выводит результат сравнения строк.",
    "11.string.h":" — конкатенирует строки \"str1\" и \"str2\", добавляя содержимое \"str2\" в конец \"str1\".",
    "12.string.h":" — выводит результат конкатенации.",
    "13.string.h":" — выводит длину строки \"str1\".",

    "math.h":" является стандартной библиотекой в языке программирования C, которая предоставляет широкий спектр математических функций. Она включает функции для выполнения различных математических вычислений, таких как тригонометрические функции, возведение в степень, логарифмические функции и другие математические операции.",
    "sqrt-function":" — вычисляет квадратный корень числа.",
    "pow-function":" — возводит число в степень.",
    "exp-function":" — вычисляет экспоненту числа.",
    "log-function":" — вычисляет натуральный логарифм числа.",
    "log10-function":" — вычисляет логарифм по основанию 10.",
    "sin-function":" — вычисляет синус угла (в радианах).",
    "cos-function":" — вычисляет косинус угла (в радианах).",
    "tan-function":" — вычисляет тангенс угла (в радианах).",
    "fabs-function":" — вычисляет абсолютное значение числа с плавающей запятой.",
    "ceil-function":" — округляет число вверх до ближайшего целого.",
    "floor-function":" — округляет число вниз до ближайшего целого.",
    "example-code-math.h1":"Вот простой пример программы на C, которая использует библиотеку ",
    "example-code-math.h2":" для выполнения математических вычислений:",
    "1.math.h":" — директива препроцессора, которая включает библиотеку <math.h>, позволяя использовать ее математические функции.",
    "2.math.h":" — объявление переменных типа double для хранения вводимых чисел и угла.",
    "3.math.h":" — запрашивает у пользователя ввести число.",
    "4.math.h":" — считывает значение типа double из стандартного ввода и сохраняет его в переменной \"num\".",
    "5.math.h":" — вычисляет квадратный корень из \"num\" и выводит его.",
    "6.math.h":" — запрашивает у пользователя значение степени.",
    "7.math.h":" — вычисляет \"num\", возведенное в степень \"power\", и выводит результат.",
    "8.math.h":" — запрашивает у пользователя угол в радианах.",
    "9.math.h":" — вычисляют и выводят синус, косинус и тангенс заданного угла.",
    "10.math.h":" — вычисляет и выводит абсолютное значение \"num\".",
    "11.math.h":" — вычисляет натуральный логарифм \"num\" и проверяет, является ли \"num\" положительным, чтобы избежать ошибок.",

    "ctype.h":" является стандартной библиотекой языка C, которая предоставляет функции для работы с символами. Она включает функции, позволяющие проверять, к какой категории относится символ (буква, цифра, пробел и т. д.), а также функции для изменения регистра символов.",
    "isalpha-function":" — проверяет, является ли символ буквой (латинская буква в верхнем или нижнем регистре).",
    "isdigit-function":" — проверяет, является ли символ цифрой.",
    "isalnum-function":" — проверяет, является ли символ буквой или цифрой.",
    "isspace-function":" — проверяет, является ли символ пробельным (например, пробел, табуляция).",
    "islower-function":" — проверяет, является ли символ строчной буквой.",
    "isupper-function":" — проверяет, является ли символ заглавной буквой.",
    "tolower-function":" — преобразует символ в нижний регистр.",
    "toupper-function":" — преобразует символ в верхний регистр.",
    "example-code-ctype.h1":"Вот простой пример программы на C, которая использует библиотеку ",
    "example-code-ctype.h2":" для проверки и преобразования символов:",
    "1.ctype.h":" — директива препроцессора, которая включает библиотеку <ctype.h>, позволяя использовать ее функции для работы с символами.",
    "2.ctype.h":" — объявление переменной типа \"char\" для хранения символа, введенного пользователем.",
    "3.ctype.h":" — выводит сообщение, предлагая пользователю ввести символ.",
    "4.ctype.h":" — считывает один символ из стандартного ввода и сохраняет его в переменной \"ch\".",
    "5.ctype.h":" — проверяет, является ли \"ch\" буквой. Если да, то программа выводит, что это буква.",
    "6.ctype.h":" — проверяет, является ли \"ch\" цифрой. Если да, то программа выводит, что это цифра.",
    "7.ctype.h":" — проверяют, является ли \"ch\" строчной или заглавной буквой соответственно.",
    "8.ctype.h":" — преобразует \"ch\" в заглавную букву (если это строчная буква).",
    "9.ctype.h":" — преобразует \"ch\" в строчную букву (если это заглавная буква).",

    "limits.h":" — это стандартная библиотека языка C, которая предоставляет константы, описывающие различные ограничения для встроенных целочисленных типов данных, таких как \"int\", \"char\", \"long\" и других. Эти константы позволяют программисту узнать предельные значения, в которых может находиться переменная определенного типа на данной системе.",
    "char_bit-function":" — количество битов в одном символе \"char\".",
    "char_min&char_max-function":" — минимальное и максимальное значение типа \"char\".",
    "schar_min&schar_max-function":" — минимальное и максимальное значение для знакового типа \"signed char\".",
    "uchar_max-function":" — максимальное значение для беззнакового типа \"unsigned char\".",
    "shrt_min&shrt_max-function":" — минимальное и максимальное значение для типа \"short\".",
    "ushrt_max":" — максимальное значение для беззнакового типа \"unsigned short\".",
    "int_min&int_max-function":" — минимальное и максимальное значение для типа \"int\".",
    "uint_max-function":" — максимальное значение для беззнакового типа \"unsigned int\".",
    "long_min&lomg_max-function":" — минимальное и максимальное значение для типа \"long\".",
    "ulong_max-function":" — максимальное значение для беззнакового типа \"unsigned long\".",
    "llong_min&llong_max-function":" — минимальное и максимальное значение для типа \"long long\".",
    "ullong_max-function":" — максимальное значение для беззнакового типа \"unsigned long long\".",
    "example-code-limits.h1":"Программа на C, которая демонстрирует использование библиотеки ",
    "example-code-limits.h2":" для вывода ограничений различных типов данных:",
    "1.limits.h":" — директива препроцессора, которая подключает библиотеку <limits.h>, предоставляя доступ к константам, описывающим ограничения для различных типов данных.",
    "2.limits.h":" — используются для вывода минимального и максимального значения, которое может хранить переменная типа \"char\".",
    "3.limits.h":" — константы, которые представляют минимальные и максимальные значения для знакового типа \"signed char\".",
    "4.limits.h":" — возвращает максимальное значение для типа \"unsigned char\", который не может принимать отрицательные значения.",
    "5.limits.h":" — минимальные и максимальные значения для типа \"short\" и его беззнакового аналога \"unsigned short\".",
    "6.limits.h":" — представляют минимальные и максимальные значения типа \"int\", которые определяются платформой (например, обычно от \"-2147483648\" до \"2147483647\").",
    "7.limits.h":" — минимальные и максимальные значения для \"long\" и беззнакового \"unsigned long\".",
    "8.limits.h":" — аналогичные константы для типа \"long long\" и его беззнакового аналога \"unsigned long long\", которые используются, если нужна более высокая точность.",

    "float.h":" в языке C содержит различные константы, определяющие характеристики и точность чисел с плавающей точкой (\"float\", \"double\", и \"long double\"). Эти константы помогают программистам узнать диапазоны и точность значений для каждого типа с плавающей точкой на данной системе, что полезно при работе с численными вычислениями и при написании кросс-платформенного кода.",
    "flt_radix-function":" — основание для экспоненциального представления чисел с плавающей точкой.",
    "flt_mant_dig&dbl_mant_dig&ldbl_mant_dig-function":" — количество значащих цифр в мантиссе для типов \"float\", \"double\" и \"long double\".",
    "flt_dig&dbl_dig&ldbl_dig-function":" — количество десятичных цифр, которые могут быть точно представлены типами \"float\", \"double\" и \"long double\".",
    "flt_min&dbl_min&ldbl_min-function":" — минимальные положительные значения для типов \"float\", \"double\" и \"long double\".",
    "flt_max&dbl_max&ldbl_max-function":" — максимальные значения для типов \"float\", \"double\" и \"long double\".",
    "flt_epsilon&dbl_epsilon&ldbl_epsilon-function":" — минимальное положительное значение, которое, будучи прибавленным к 1.0, даёт результат больше 1.0 для каждого типа.",
    "flt_min_exp&dbl_min_exp&ldbl_min_exp-function":" — минимальный показатель степени для типов \"float\", \"double\" и \"long double\".",
    "flt_max_exp&dbl_max_exp&ldbl_max_exp":"— максимальный показатель степени для типов \"float\", \"double\" и \"long double\".",
    "example-code-float.h1":"Ниже приведён пример программы на языке C, которая использует ",
    "example-code-float.h2":" для отображения характеристик различных типов чисел с плавающей точкой:",
    "1.float.h":" — директива #include <float.h> подключает библиотеку <float.h>, предоставляя доступ к константам, определяющим диапазоны и точность чисел с плавающей точкой.",
    "2.float.h":" — используются для отображения минимального и максимального значений типа \"float\".",
    "3.float.h":" — показывает количество значащих десятичных цифр, которое может быть точно представлено в типе \"float\".",
    "4.float.h":" — минимальное значение, которое, будучи добавленным к 1.0, даёт значение, отличное от 1.0 для \"float\".",
    "5.float.h":" — минимальное и максимальное значения для типа \"double\".",
    "6.float.h":" — количество десятичных цифр точности для типа \"double\".",
    "7.float.h":" — аналогично \"FLT_EPSILON\", минимальное значение, которое меняет результат прибавления к 1.0 для типа \"double\".",
    "8.float.h":" — минимальное и максимальное значения для типа \"long double\".",
    "9.float.h":" — количество значащих десятичных цифр для типа \"long double\".",
    "10.float.h":" — минимальное значение для \"long double\", влияющее на результат прибавления к 1.0.",

    "stddef.h":" в C предоставляет определения для работы с базовыми типами данных и управлением памятью, обеспечивая более универсальное и понятное использование типов на разных системах. Эта библиотека включает в себя константы и типы для управления выравниванием данных, вычисления смещений в памяти и работы со специальными значениями.",
    "null-function":" — макрос, представляющий нулевой указатель, который обычно используется, чтобы указать, что указатель не ссылается на допустимый адрес в памяти.",
    "size_t-function":" — беззнаковый целочисленный тип, представляющий размер объекта в байтах, часто используется для индексации массивов и в счетчиках циклов.",
    "ptrdiff_t-funcrion":" — знаковый целочисленный тип, используемый для арифметики указателей, особенно для хранения разницы между двумя указателями.",
    "offsetof-function":" — макрос, вычисляющий смещение (в байтах) заданного элемента структуры. Это полезно для управления расположением данных в памяти и их выравниванием.",
    "example-code-stddef.h1":"Пример программы, демонстрирующей использование констант и типов из ",
    "example-code-stddef.h2":":",
    "1.stddef.h":" — указатель \"p\" инициализируется значением \"NULL\", что указывает на отсутствие действительного адреса в памяти. В \"if\"-условии проверяется это значение, чтобы предотвратить ошибки, такие как разыменование неинициализированного указателя.",
    "2.stddef.h":" — переменная \"array_size\" имеет тип \"size_t\", подходящий для хранения неотрицательных значений, особенно при работе с индексами массивов. Спецификатор \"%zu\" корректно выводит значения типа \"size_t\".",
    "3.stddef.h":" — переменная \"diff\" хранит разницу между двумя указателями в массиве, измеряя количество элементов между \"&arr[5]\" и \"&arr[0]\". Тип \"ptrdiff_t\" помогает безопасно выполнять арифметические операции с указателями.",
    "4.stddef.h":" — макрос \"offsetof\" вычисляет смещение элемента \"value\" внутри структуры \"MyStruct\". Это часто используется в низкоуровневом программировании для контроля за расположением структур в памяти.",

    "key-definition":"Основные определения в ",
    "stdint.h":" в C предоставляет фиксированные целочисленные типы, что позволяет писать более переносимый код, определяя целые типы с точной шириной и соответствующими пределами. Эта библиотека особенно полезна в системном программировании, встраиваемых системах и в приложениях, где требуется строгий контроль над размером данных и их диапазоном.",
    "stdint.h-key-definition-head-1":"Целочисленные типы с фиксированной шириной: ",
    "stdint.h-key-definition-text-1":"Эти типы гарантируют фиксированный размер целых чисел на разных системах, делая код предсказуемым и совместимым.",
    "stdint.h-key-definition-head-2":"Целые типы с минимальной шириной: ",
    "stdint.h-key-definition-text-2":"Эти типы гарантируют как минимум указанную ширину, что полезно, если требуется минимальный размер, но точная ширина не критична.",
    "stdint.h-key-definition-head-3":"Целые типы с максимальной скоростью: ",
    "stdint.h-key-definition-text-3":"Эти типы представляют собой самые быстрые типы, доступные с минимум заданной шириной, что оптимизирует производительность на некоторых платформах.",
    "stdint.h-key-definition-head-4":"Целочисленные типы для хранения указателей: ",
    "stdint.h-key-definition-head-5":"Целые типы с максимальной шириной: ",
    "stdint.h-key-definition-text-5":"Типы, предоставляющие максимально доступную ширину целых чисел.",
    "stdint.h-key-definition-head-6":"Макросы для пределов целых чисел: ",
    "stdint.h-key-definition-text-6":"Эти макросы определяют минимальные и максимальные значения для каждого типа в <stdint.h>. Примеры: \"INT8_MAX\", \"INT32_MIN\", \"UINT64_MAX\" и другие, что делает код более понятным и безопасным.",
    "stdint.h-text-for-definition-1-1":" — знаковые целые типы шириной 8, 16, 32 и 64 бита соответственно.",
    "stdint.h-text-for-definition-1-2":" — беззнаковые целые типы шириной 8, 16, 32 и 64 бита соответственно.",
    "stdint.h-text-for-definition-2-1":" — знаковые типы с минимальной шириной.",
    "stdint.h-text-for-definition-2-2":" — беззнаковые типы с минимальной шириной.",
    "stdint.h-text-for-definition-3-1":" — знаковые типы с максимальной скоростью.",
    "stdint.h-text-for-definition-3-2":" — беззнаковые типы с максимальной скоростью.",
    "stdint.h-text-for-definition-4-1":" — целочисленные типы, которые гарантированно могут хранить указатели. Это полезно для преобразования указателей в целые числа и обратно.",
    "stdint.h-text-for-definition-5-1":" — знаковые и беззнаковые целые числа с максимальной шириной.",

    "stdbool":" предоставляет стандартный способ работы с булевыми значениями в C. Хотя язык C изначально не имел встроенного булева типа данных, начиная с C99 эта библиотека позволяет использовать значения \"true\" и \"false\" для представления логического состояния, что делает код более читабельным и улучшает его переносимость.",
    "stdbool.h-key-definition-head-1":"Тип ",
    "stdbool.h-key-definition-text-1":" Булев тип данных, который является синонимом целого типа \"_Bool\" (встроенного типа в C). Используется для хранения логических значений.",
    "stdbool.h-key-definition-head-2":"Константы ",
    "stdbool.h-key-definition-head-3":"Простота использования: ",
    "stdbool.h-key-definition-text-3":"Подключив <stdbool.h>, можно работать с булевыми значениями, как в других языках программирования, что позволяет делать код более интуитивным.",
    "stdbool.h-text-for-definition-2-1":" — логическое значение истинности, эквивалентное числу \"1\".",
    "stdbool.h-text-for-definition-2-2":" — логическое значение ложности, эквивалентное числу \"0\".",
    "example-code-stdbool.h1":"Пример программы, показывающей использование типов и значений из ",
    "example-code-stdool.h2":":",
    "name.1.stdbool.h":"Тип ",
    "name.2.stdbool.h":"Константы ",
    "name.3.stdbool.h":"Условная проверка с булевыми значениями: ",
    "1.stdbool.h":" Переменная \"is_even\" объявлена с типом \"bool\", что делает код легче читаемым, так как сразу видно, что переменная предназначена для хранения логического значения.",
    "2.stdbool.h":" Булевым переменным можно присваивать значения \"true\" или \"false\". В этом примере \"is_even\" принимает значение \"true\", если число является четным.",
    "3.stdbool.h":" В конструкции \"if\" проверяется значение переменной \"is_even\", что позволяет вывести соответствующее сообщение о числе. Это улучшает читаемость кода по сравнению с использованием чисел \"1\" и \"0\".",

    "introduction":"Введение"

}