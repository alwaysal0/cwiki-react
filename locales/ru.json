{
    "-------------------------------------------------MAIN-PAGE------------------------------------------------------------":"",
    "1":"HEADER",

    "main": "ГЛАВНАЯ",
    "start": "СТАРТ",
    "libraries": "БИБЛИОТЕКИ",
    "course": "УЧЕБНИК",
    "wiki": "ВИКИ",

    "2":"MAIN-BOX",

    "its-easy":" - это просто",
    "its-not-scary": "не так страшно как кажется",
    "our-guide": "наш справочник поможет с этим",
    "you`ll-find": "ВЫ НАЙДЕТЕ",
    "online-code-editor": "Онлайн редактор кода",
    "brief-overview-of-libraries": "Кратко о библиотеках",
    "even-beginners-will-understand": "Поймут даже чайники",
    "online-compiler": "Онлайн компилятор",

    "3":"INFORMATION-ABOUT-C",

    "history-of": "История языка ",
    "above-the-language": "Над языком",
    "first-part-of-text": "с 1969 по 1973 год работали инженеры Кен Томпсон и Деннис Ритчи из американской компании Bell Labs. До этого языки высокого уровня были очень ограниченными и не позволяли делать многие вещи, ставшие сегодня привычными. Многие функции разработчикам приходилось писать на ассемблере или на уровне машинного кода. Такой подход замедлял разработку и требовал глубоких знаний о том, как работает железо.",
    "second-part-of-text": "Согласно одной из легенд, у Ритчи была любимая компьютерная игра, которую он запускал на сервере компании. Ритчи захотел перенести игру на рабочий компьютер, но на нем не было операционной системы. Поэтому он решил переписать уже имеющуюся ОС, которая была полностью написана на ассемблере, на высокоуровневый язык Би. В итоге оказалось, что возможности Би не позволяют использовать все особенности компьютера, поэтому было решено создать свой язык программирования. Так и появился Си.",
    "third-part-of-text": "Язык C стал популярным в основном из-за его широкого применения в операционной системе UNIX, на базе которой разрабатывают дистрибутивы Linux.",

    "4":"MINIBOX-WITH-ICONS",

    "what-you-need":"ЧТО ТЕБЕ ПОНАДОБИТСЯ",
    "pc-or-laptop":"ПК или Ноутбук",
    "a-lot-of-your-time":"Много твоего Времени",
    "patience":"усидчивости",
    "positive-attitude":"Позитивный настрой",
    "and-a-bit-of-brains":"И немножко Мозгов",

    "5":"MINIBOX-WITH-ICONS",

    "hello-world":" 'Hello World' - на ",
    "how-it-looks-like":"Вот так выглядит код 'Hello World!'",
    "by-the-way":"к слову это активное ФОТО, попробуй код сам",
    "compiling-our-file":"Тут мы компилируем наш файл",
    "active":"(АКТИВНО)",
    "execution-code":"Вот запуск нашего кода",
    "easy":"Правда не сложно?",
    "press":"Жми ",
    "guide-below":" ниже и читай руководство для новичков",

    "6":"FOOTER",
    
    "language-C":"Язык C",
    "code-editor":"Редактор Кода",
    "compiler":"Компилятор",
    "writing-logic":"Логика Написания",
    "first-program":"Первая Программа",
    "more":"БОЛЬШЕ",
    "development":"Сайт находится на стадии РАЗРАБОТКИ",

    "-------------------------------------------------START-PAGE------------------------------------------------------------":"",

    "lets-get-started": "НАЧИНАЕМ",
    "history&origin": "История & Происхождение",
    "history": "Язык программирования C был разработан в начале 1970-х годов в лабораториях Bell Лабс Деннисом Ритчи. Изначально он был создан как системный язык программирования для разработки операционной системы Unix. Со временем язык C эволюционировал и оказал влияние на многие другие языки программирования, такие как C++, C# и Java.",
    "history2":"Его прочное наследие связано с эффективностью и близостью к аппаратному обеспечению, что сделало его основополагающим языком в информатике.",

    "advantages": "Плюсы Языка ",
    "head-of-high-perfomance":"Высокая Производительность",
    "high-perfomance": "близок к машинному коду, подходит для системного программирования.",
    "head-of-memory-control": "Контроль над Памятью",
    "memory-control": "позволяет работать с указателями и управлять памятью вручную.",
    "head-of-portability":"Портируемость",
    "portability": "программы на C можно легко перенести на разные платформы.",
    "head-of-wide-support-and-popularity":"Широкая Поддержка и Популярность",
    "wide-support-and-popularity": "компиляторы и библиотеки доступны практически везде.",
    "head-of-simplicity-and-structure":"Простота и Структурированность",
    "simplicity-and-structure": "минималистичный синтаксис и поддержка модульности через функции.",
    "features1":"Эти особенности делают ",
    "features2":" хорошим выбором для разработки операционных систем, драйверов и производительных приложений.",

    "on":" на ",
    "stdio":" - подключает стандартную библиотеку ввода-вывода Standard Input Output Library.",
    "int-main":" - объявляем функцию \"main\" без аргументов \"()\", она начинается с \"{\" и закрывается также с помощью \"}\".",
    "char":" - объявляем массив символов (строку), где а - это имя массива. Каждый элемент(буква) занимает свое место в массиве.",
    "printf":" - мы выводим наш массив на экран с помощью команды printf, где \"%s\" — это спецификатор, указывающий, что аргумент a, передаваемый в команду, является строкой.",
    "explanation":"Объяснение Кода",
    "intrested1":"Действительно, это не сложно! Заинтересовался? Посети также наши другие страницы ",
    "intrested2":", где ты найдешь много интересной и полезной информации.",

    "standart-libraries":"Стандартные Библиотеки",
    "definition":"ОПРЕДЕЛЕНИЕ",
    "useful-libraries":"В языке C стандартные библиотеки играют ключевую роль, предоставляя набор готовых функций и инструментов, которые помогают разработчикам писать программы быстрее, проще и с минимальными ошибками. Без использования библиотек программисты должны были бы вручную реализовывать базовые операции, такие как ввод и вывод, работу с памятью и строки, что существенно усложнило бы разработку. Чем они полезны:",
    "pre-simlification-of-development":"Упрощения разработки",
    "simplification-of-development":" — предоставляют готовые функции для базовых операций (ввод-вывод, работа с памятью), избавляя от необходимости реализовывать их вручную.",
    "pre-reliability-and-code-quality":"Надежности и качества кода",
    "reliability-and-code-quality":" — функции в библиотеках проверены и отлажены, что снижает вероятность ошибок.",
    "pre-portability-libraries":"Переносимости",
    "portability-libraries":" — стандартные библиотеки поддерживаются на всех основных платформах, что позволяет запускать код на разных системах.",
    "pre-perfomance-optimization":"Оптимизации производительности",
    "perfomance-optimization":" — библиотечные функции часто оптимизированы для быстрого выполнения.",
    "pre-simplification-of-OS-interaction":"Упрощения работы с ОС",
    "simplification-of-OS-interaction":" — предоставляют универсальные интерфейсы для работы с файлами, процессами и сигналами.",
    "pre-error-managment":"Управления ошибками",
    "error-managment":" — встроенные механизмы обработки ошибок, такие как \"errno\", делают программы более безопасными.",
    "pre-code-reduction":"Сокращения кода",
    "code-reduction":" — использование библиотек уменьшает объем кода, делая его более понятным и читаемым.",
    "library":"БИБЛИОТЕКА",

    "stdio.h":" (Standard Input/Output) — это стандартная библиотека в языке C, которая предоставляет функции для выполнения операций ввода и вывода. Она включает в себя функции для работы с консолью и файлами, позволяя программам получать данные от пользователя и выводить информацию на экран.",
    "main-functions":"Основные функции библиотеки ",
    "printf-function":" — вывод данных на экран.",
    "scanf-function":" — ввод данных с клавиатуры.",
    "fopen-fclose-function": " — открытие и закрытие файлов.",
    "fread-fwrite-function": " — чтение и запись данных в файлы.",
    "fprintf-fscanf-function": " — форматированный ввод и вывод для файлов.",
    "example-code":"Пример Кода",
    "example-code-stdio.h1":"Вот простой пример программы на C, использующей библиотеку ",
    "example-code-stdio.h2":", чтобы вводить и выводить данные:",
    "explanation-of-the-code":"Объяснение кода:",

    "....":"explanation of code STDIO.H",

    "stdio.h-explanation":" — директива препроцессора, которая подключает библиотеку <stdio.h>, позволяя использовать ее функции в программе.",
    "main-explanation":" — функция \"main\" является точкой входа в программу. Каждый C-программ начинается с этой функции.",
    "number-explanation":" — объявление переменной \"number\" типа \"int\" для хранения введенного целого числа.",
    "printf-enter-explanation":" — выводит сообщение на экран с просьбой ввести число.",
    "scanf-explanation":" — считывает введенное число с клавиатуры и сохраняет его в переменной \"number\". Символ \"&\" перед \"number\" означает \"адрес\" этой переменной, необходимый для корректной работы scanf.",
    "printf-entered-explanation":" — выводит на экран сообщение с введенным числом. \"%d\" — спецификатор формата для целого числа.",
    "return-0-explanation":" — завершает программу и возвращает 0, что обычно указывает на успешное выполнение.",

    "stdlib.h":" — это стандартная библиотека в языке C, которая предоставляет функции для выполнения общих утилитных операций, включая управление памятью, управление процессами, преобразования и многое другое. Она необходима для таких задач, как динамическое выделение памяти, генерация случайных чисел и преобразование между различными типами данных.",
    "malloc-calloc-realloc-free-function":" — функции для динамического выделения и освобождения памяти.",
    "exit-function":" — завершает программу и может вернуть статус выхода.",
    "atoi-atof-strtol-strtod-function":" — функции для преобразования строк в целые или плавающие числа.",
    "rand-srand-function":" — функции для генерации случайных чисел.",
    "system-function":" — выполняет системную команду.",
    "example-code-stdlib.h1":"Вот простой пример программы на C, которая использует библиотеку ",
    "example-code-stdlib.h2":" для динамического выделения памяти и выполнения основных операций:",
    "stdlib.h-explanation":" — директива препроцессора, которая подключает библиотеку <stdlib.h>, позволяя использовать ее функции в программе.",
    "int-array-explanation":" — объявляет указатель \"array\", который будет использоваться для указания на динамически выделенный массив целых чисел.",
    "int-size-explanation":" — объявляет переменную \"size\", чтобы хранить размер массива, введенный пользователем.",
    "printf-enter-size-of-array-explanation":" — запрашивает у пользователя ввести размер массива.",
    "scanf-d-explanation":" — считывает введенный размер и сохраняет его в переменной \"size\".",
    "array-int-malloc-explanation":" — динамически выделяет память для массива целых чисел заданного размера. Функция \"malloc\" возвращает указатель на выделенную память. Приведение типа \"(int *)\" обеспечивает соответствие типа указателя.",
    "array-NULL-explanation":" — проверяет, была ли успешной операция выделения памяти. Если \"malloc\" не удалась, она возвращает \"NULL\".",
    "printf-memory-explanation":" — выводит сообщение об ошибке, если выделение памяти не удалось.",
    "for-i-explanation":" — инициализирует цикл для заполнения массива четными числами.",
    "array[i]-explanation":" — присваивает значение четного числа каждому элементу массива.",
    "printf(array[d])-explanation":" — выводит индекс и значение каждого элемента массива.",
    "free(array)-explanation":" — освобождает выделенную память, чтобы избежать утечек памяти.",

    "string.h":" — это стандартная библиотека в языке C, которая предоставляет функции для работы со строками. Она включает в себя функции для манипуляции строками, сравнения строк, копирования и поиска подстрок, а также для вычисления длины строк.",
    "strlen-function":" — вычисляет длину строки.",
    "strcpy-funtion":" — копирует одну строку в другую.",
    "strncpy-function":" — копирует определенное количество символов из одной строки в другую.",
    "strcat-function":" — конкатенирует (добавляет) одну строку к другой.",
    "strcmp-function":" — сравнивает две строки.",
    "strchr-function":" — ищет первое вхождение символа в строке.",
    "strstr-function":" — ищет первое вхождение подстроки в строке.",
    "example-code-string.h1":"Вот простой пример программы на C, которая использует библиотеку ",
    "example-code-string.h2":" для работы со строками:",
    "1.string.h":" — директива препроцессора, которая подключает библиотеку <string.h>, позволяя использовать ее функции для работы со строками.",
    "2.string.h":" — объявление массивов символов для хранения строк. Массивы имеют размер 50 символов.",
    "3.string.h":" — запрашивает у пользователя ввод первой строки.",
    "4.string.h":" — считывает строку из стандартного ввода (клавиатуры) и сохраняет ее в массиве \"str1\".",
    "5.string.h":" — запрашивает у пользователя ввод второй строки.",
    "6.string.h":" — считывает строку из стандартного ввода и сохраняет ее в массиве \"str2\".",
    "7.string.h":" — удаляет символ новой строки из \"str1\", если он есть.",
    "8.string.h":" — удаляет символ новой строки из \"str2\", если он есть.",
    "9.string.h":" — сравнивает строки \"str1\" и \"str2\". Функция возвращает 0, если строки равны, отрицательное значение, если \"str1\" меньше \"str2\", и положительное значение, если \"str1\" больше \"str2\".",
    "10.string.h":" — выводит результат сравнения строк.",
    "11.string.h":" — конкатенирует строки \"str1\" и \"str2\", добавляя содержимое \"str2\" в конец \"str1\".",
    "12.string.h":" — выводит результат конкатенации.",
    "13.string.h":" — выводит длину строки \"str1\"."

}