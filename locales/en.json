{

    ".":"HEADER",

    "main": "MAIN",
    "start": "START",
    "libraries": "LIBRARIES",
    "course": "COURSE",
    "wiki": "WIKI",

    "..":"MAIN--BOX",

    "its-easy": " - it`s easy",
    "its-not-scary": "it's not as scary as it seems",
    "our-guide": "our guide will help with that",
    "you`ll-find": "YOU`LL FIND",
    "online-code-editor": "Online code editor",
    "brief-overview-of-libraries": "Brief overview of libraries",
    "even-beginners-will-understand": "Even beginners`ll understand",
    "online-compiler": "Online compiler",

    "...":"INFORMATION--ABOUT--C",

    "history-of": "History of ",
    "above-the-language": "Above the language",
    "first-part-of-text": "from 1969 to 1973, engineers Ken Thompson and Dennis Ritchie from the American company Bell Labs worked on this. Before that, high-level programming languages were very limited and didn't allow for many things that have become common today. Developers had to write many functions in assembly language or at the machine code level. This approach slowed down development and required deep knowledge of how the hardware worked.",
    "second-part-of-text": "According to one legend, Ritchie had a favorite computer game that he used to run on the company’s server. He wanted to transfer the game to his personal workstation, but it didn't have an operating system. As a result, he decided to rewrite the existing OS, which was entirely written in assembly language, using the high-level language B. However, it turned out that B's capabilities were insufficient to fully utilize the computer's features, so it was decided to create a new programming language. This is how C was born.",
    "third-part-of-text": "The C language became popular primarily due to its widespread use in the UNIX operating system, on which Linux distributions are based.",

    "4":"MINIBOX-WITH-ICONS",

    "what-you-need":"WHAT DO YOU NEED",
    "pc-or-laptop":"PC or Laptop",
    "a-lot-of-your-time":"A lot of yout Time",
    "patience":"patience",
    "positive-attitude":"Positive attitude",
    "and-a-bit-of-brains":"And a bit of Brains",

    "5":"MINIBOX-WITH-ICONS",

    "hello-world":" 'Hello World' - on ",
    "how-it-looks-like":"This is what the code looks like: 'Hello World!'",
    "by-the-way":"by the way, this is an active PHOTO, try the code yourself",
    "compiling-our-file":"We are compiling our file here",
    "active":"(ACTIVE)",
    "execution-code":"This is the execution of our code",
    "easy":"Isn't it easy?",
    "press":"Press ",
    "guide-below":" read the guide for beginners below.",

    "6":"FOOTER",
    
    "language-C":"Language C",
    "code-editor":"Code Editor",
    "compiler":"Compiler",
    "writing-logic":"Writing Logic",
    "first-program":"First Program",
    "more":"MORE",
    "development":"The website is under DEVELOPMENT",

    "-------------------------------------------------START-PAGE------------------------------------------------------------":"",

    "lets-get-started": "LET'S START",
    "history&origin": "Origin & History",
    "history": "The C programming language was developed in the early 1970s at Bell Labs by Dennis Ritchie. It was originally created as a system programming language for developing the Unix operating system. Over the years, C has evolved and influenced many other programming languages, such as C++, C#, and Java.",
    "history2":" Its enduring legacy is rooted in its efficiency and closeness to hardware, making it a foundational language in computer science.",

    "advantages": "Advantages of the",
    "head-of-high-perfomance":"High Performance",
    "high-perfomance": "close to machine code, suitable for system programming.",
    "head-of-memory-control":"Memory Control",
    "memory-control": "allows working with pointers and managing memory manually.",
    "head-of-portability":"Portability",
    "portability": "C programs can easily be transferred to different platforms.",
    "head-of-wide-support-and-popularity":"Wide Support and Popularity",
    "wide-support-and-popularity": "compilers and libraries are available almost everywhere.",
    "head-of-simplicity-and-structure":"Simplicity and Structure",
    "simplicity-and-structure": "minimalist syntax and modularity support through functions.",
    "features1":"These features make ",
    "features2":" a strong choice for developing operating systems, drivers, and high-performance applications.",

    "on":" on ",
    "stdio":" - includes the Standard Input Output Library.",
    "int-main":" - we declare the function \"main\" without arguments \"()\", it begins with \"{\" and ends with \"}\" as well.",
    "char":" - we declare an array of characters (a string), where a is the name of the array. Each element (letter) occupies its own position in the array.",
    "printf":" - we print our array to the screen using the printf command, where \"%s\" is the specifier indicating that the argument a passed to the command is a string.",
    "explanation":"Explanation of Code",
    "intrested1":"Indeed, it's not difficult! Interested? Visit our other pages ",
    "intrested2":", where you'll find plenty of interesting and useful information.",

    "standart-libraries":"Standart Libraries",
    "definition":"DEFENITION",
    "useful-libraries":"In the C language, standard libraries play a key role by providing a set of ready-made functions and tools that help developers write programs faster, more easily, and with fewer errors. Without libraries, programmers would need to manually implement basic operations, such as input and output, memory management, and string handling, which would significantly complicate development. Here’s how they are useful:",
    "pre-simlification-of-development":"Simplification of development",
    "simplification-of-development":" — they provide ready-made functions for basic operations (input-output, memory management), eliminating the need to implement them manually.",
    "pre-reliability-and-code-quality":"Reliability and code quality",
    "reliability-and-code-quality":" — functions in libraries are tested and debugged, which reduces the likelihood of errors.",
    "pre-portability-libraries":"Portability",
    "portability-libraries":" — standard libraries are supported on all major platforms, allowing code to run on different systems.",
    "pre-perfomance-optimization":"Performance optimization",
    "perfomance-optimization":" — library functions are often optimized for fast execution.",
    "pre-simplification-of-OS-interaction":"Simplification of OS interaction",
    "simplification-of-OS-interaction":" — they provide universal interfaces for working with files, processes, and signals.",
    "pre-error-managment":"Error management",
    "error-managment":" — built-in error handling mechanisms, such as \"errno\", make programs safer.",
    "pre-code-reduction":"Code reduction",
    "code-reduction":" — using libraries decreases the volume of code, making it more understandable and readable.",
    "library":"LIBRARY",

    "stdio.h":" (Standard Input/Output) library is a standard library in the C language that provides functions for performing input and output operations. It includes functions for working with the console and files, allowing programs to receive data from users and output information to the screen.",
    "main-functions":"Key Functions of the ",
    "printf-function":" — outputs data to the screen.",
    "scanf-function":" — inputs data from the keyboard.",
    "fopen-fclose-function": " — opens and closes files.",
    "fread-fwrite-function": " — reads from and writes to files.",
    "fprintf-fscanf-function": " — formatted input and output for files.",
    "example-code":"Example Code",
    "example-code-stdio.h1":"Here is a simple example of a C program that uses the ",
    "example-code-stdio.h2":" library to input and output data:",
    "explanation-of-the-code":"Explanation of the Code:",

    "....":"explanation of code STDIO.H",

    "stdio.h-explanation":" — a preprocessor directive that includes the <stdio.h> library, allowing the use of its functions in the program.",
    "main-explanation":" — the \"main\" function is the entry point of the program. Every C program starts with this function.",
    "number-explanation":" — declares a variable \"number\" of type \"int\" to store the entered integer.",
    "printf-enter-explanation":" — displays a message on the screen asking for a number.",
    "scanf-explanation":" — reads the entered number from the keyboard and stores it in the \"number\" variable. The \"&\" symbol before \"number\" means \"address\" of this variable, which is necessary for \"scanf\" to work correctly.",
    "printf-entered-explanation":" — outputs a message on the screen with the entered number. \"%d\" is the format specifier for an integer.",
    "return-0-explanation":" — ends the program and returns 0, which usually indicates successful execution.",

    "stdlib.h":" - is a standard library in the C language that provides functions for performing general utility operations, including memory management, process control, conversions, and more. It is essential for tasks such as dynamic memory allocation, random number generation, and conversion between different data types.",
    "malloc-calloc-realloc-free-function":" — functions for dynamic memory allocation and deallocation.",
    "exit-function":" — terminates a program and can return an exit status.",
    "atoi-atof-strtol-strtod-function":" — functions for converting strings to integers or floating-point numbers.",
    "rand-srand-function":" — functions for generating random numbers.",
    "system-function":" — executes a system command.",
    "example-code-stdlib.h1":"Here is a simple example of a C program that uses the ",
    "example-code-stdlib.h2":" library to allocate memory dynamically and perform basic operations:",
    "stdlib.h-explanation":" — a preprocessor directive that includes the <stdlib.h> library, allowing the use of its functions in the program.",
    "int-array-explanation":" — declares a pointer \"array\" that will be used to point to a dynamically allocated integer array.",
    "int-size-explanation":" — declares a variable \"size\" to store the size of the array as input from the user.",
    "printf-enter-size-of-array-explanation":" — prompts the user to enter the size of the array.",
    "scanf-d-explanation":" — reads the \"size\" entered by the user and stores it in the size variable.",
    "array-int-malloc-explanation":" — dynamically allocates memory for an array of integers of the specified size. The \"malloc\" function returns a pointer to the allocated memory. The cast \"(int *)\" ensures that the pointer type matches.",
    "array-NULL-explanation":" — checks if memory allocation was successful. If \"malloc\" fails, it returns \"NULL\".",
    "printf-memory-explanation":" — outputs an error message if memory allocation fails.",
    "for-i-explanation":" — initializes a loop to fill the array with even numbers.",
    "array[i]-explanation":" — assigns the value of the even number to each element of the array.",
    "printf(array[d])-explanation":" — outputs the index and value of each element in the array.",
    "free(array)-explanation":" — releases the allocated memory back to the system to avoid memory leaks."
}

