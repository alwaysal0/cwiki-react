{

    ".":"HEADER",

    "main": "MAIN",
    "start": "START",
    "libraries": "LIBRARIES",
    "course": "COURSE",
    "wiki": "WIKI",

    "..":"MAIN--BOX",

    "its-easy": " - it`s easy",
    "its-not-scary": "it's not as scary as it seems",
    "our-guide": "our guide will help with that",
    "you`ll-find": "YOU`LL FIND",
    "online-code-editor": "Online code editor",
    "brief-overview-of-libraries": "Brief overview of libraries",
    "even-beginners-will-understand": "Even beginners`ll understand",
    "online-compiler": "Online compiler",

    "...":"INFORMATION--ABOUT--C",

    "history-of": "History of ",
    "above-the-language": "Above the language",
    "first-part-of-text": "from 1969 to 1973, engineers Ken Thompson and Dennis Ritchie from the American company Bell Labs worked on this. Before that, high-level programming languages were very limited and didn't allow for many things that have become common today. Developers had to write many functions in assembly language or at the machine code level. This approach slowed down development and required deep knowledge of how the hardware worked.",
    "second-part-of-text": "According to one legend, Ritchie had a favorite computer game that he used to run on the company’s server. He wanted to transfer the game to his personal workstation, but it didn't have an operating system. As a result, he decided to rewrite the existing OS, which was entirely written in assembly language, using the high-level language B. However, it turned out that B's capabilities were insufficient to fully utilize the computer's features, so it was decided to create a new programming language. This is how C was born.",
    "third-part-of-text": "The C language became popular primarily due to its widespread use in the UNIX operating system, on which Linux distributions are based.",

    "4":"MINIBOX-WITH-ICONS",

    "what-you-need":"WHAT DO YOU NEED",
    "pc-or-laptop":"PC or Laptop",
    "a-lot-of-your-time":"A lot of yout Time",
    "patience":"patience",
    "positive-attitude":"Positive attitude",
    "and-a-bit-of-brains":"And a bit of Brains",

    "5":"MINIBOX-WITH-ICONS",

    "hello-world":" 'Hello World' - on ",
    "how-it-looks-like":"This is what the code looks like: 'Hello World!'",
    "by-the-way":"by the way, this is an active PHOTO, try the code yourself",
    "compiling-our-file":"We are compiling our file here",
    "active":"(ACTIVE)",
    "execution-code":"This is the execution of our code",
    "easy":"Isn't it easy?",
    "press":"Press ",
    "guide-below":" read the guide for beginners below.",

    "6":"FOOTER",
    
    "language-C":"Language C",
    "code-editor":"Code Editor",
    "compiler":"Compiler",
    "writing-logic":"Writing Logic",
    "first-program":"First Program",
    "more":"MORE",
    "development":"The website is under DEVELOPMENT",

    "-------------------------------------------------START-PAGE------------------------------------------------------------":"",

    "lets-get-started": "LET'S START",
    "history&origin": "Origin & History",
    "history": "The C programming language was developed in the early 1970s at Bell Labs by Dennis Ritchie. It was originally created as a system programming language for developing the Unix operating system. Over the years, C has evolved and influenced many other programming languages, such as C++, C#, and Java.",
    "history2":" Its enduring legacy is rooted in its efficiency and closeness to hardware, making it a foundational language in computer science.",

    "advantages": "Advantages of the",
    "head-of-high-perfomance":"High Performance",
    "high-perfomance": "close to machine code, suitable for system programming.",
    "head-of-memory-control":"Memory Control",
    "memory-control": "allows working with pointers and managing memory manually.",
    "head-of-portability":"Portability",
    "portability": "C programs can easily be transferred to different platforms.",
    "head-of-wide-support-and-popularity":"Wide Support and Popularity",
    "wide-support-and-popularity": "compilers and libraries are available almost everywhere.",
    "head-of-simplicity-and-structure":"Simplicity and Structure",
    "simplicity-and-structure": "minimalist syntax and modularity support through functions.",
    "features1":"These features make ",
    "features2":" a strong choice for developing operating systems, drivers, and high-performance applications.",

    "on":" on ",
    "stdio":" - includes the Standard Input Output Library.",
    "int-main":" - we declare the function \"main\" without arguments \"()\", it begins with \"{\" and ends with \"}\" as well.",
    "char":" - we declare an array of characters (a string), where a is the name of the array. Each element (letter) occupies its own position in the array.",
    "printf":" - we print our array to the screen using the printf command, where \"%s\" is the specifier indicating that the argument a passed to the command is a string.",
    "explanation":"Explanation of Code",
    "intrested1":"Indeed, it's not difficult! Interested? Visit our other pages ",
    "intrested2":", where you'll find plenty of interesting and useful information.",

    "standart-libraries":"Standart Libraries",
    "definition":"DEFENITION",
    "useful-libraries":"In the C language, standard libraries play a key role by providing a set of ready-made functions and tools that help developers write programs faster, more easily, and with fewer errors. Without libraries, programmers would need to manually implement basic operations, such as input and output, memory management, and string handling, which would significantly complicate development. Here’s how they are useful:",
    "pre-simlification-of-development":"Simplification of development",
    "simplification-of-development":" — they provide ready-made functions for basic operations (input-output, memory management), eliminating the need to implement them manually.",
    "pre-reliability-and-code-quality":"Reliability and code quality",
    "reliability-and-code-quality":" — functions in libraries are tested and debugged, which reduces the likelihood of errors.",
    "pre-portability-libraries":"Portability",
    "portability-libraries":" — standard libraries are supported on all major platforms, allowing code to run on different systems.",
    "pre-perfomance-optimization":"Performance optimization",
    "perfomance-optimization":" — library functions are often optimized for fast execution.",
    "pre-simplification-of-OS-interaction":"Simplification of OS interaction",
    "simplification-of-OS-interaction":" — they provide universal interfaces for working with files, processes, and signals.",
    "pre-error-managment":"Error management",
    "error-managment":" — built-in error handling mechanisms, such as \"errno\", make programs safer.",
    "pre-code-reduction":"Code reduction",
    "code-reduction":" — using libraries decreases the volume of code, making it more understandable and readable.",
    "library":"LIBRARY",

    "stdio.h":" (Standard Input/Output) library is a standard library in the C language that provides functions for performing input and output operations. It includes functions for working with the console and files, allowing programs to receive data from users and output information to the screen.",
    "main-functions":"Key Functions of the ",
    "printf-function":" — outputs data to the screen.",
    "scanf-function":" — inputs data from the keyboard.",
    "fopen-fclose-function": " — opens and closes files.",
    "fread-fwrite-function": " — reads from and writes to files.",
    "fprintf-fscanf-function": " — formatted input and output for files.",
    "example-code":"Example Code",
    "example-code-stdio.h1":"Here is a simple example of a C program that uses the ",
    "example-code-stdio.h2":" library to input and output data:",
    "explanation-of-the-code":"Explanation of the Code:",

    "....":"explanation of code STDIO.H",

    "stdio.h-explanation":" — a preprocessor directive that includes the <stdio.h> library, allowing the use of its functions in the program.",
    "main-explanation":" — the \"main\" function is the entry point of the program. Every C program starts with this function.",
    "number-explanation":" — declares a variable \"number\" of type \"int\" to store the entered integer.",
    "printf-enter-explanation":" — displays a message on the screen asking for a number.",
    "scanf-explanation":" — reads the entered number from the keyboard and stores it in the \"number\" variable. The \"&\" symbol before \"number\" means \"address\" of this variable, which is necessary for \"scanf\" to work correctly.",
    "printf-entered-explanation":" — outputs a message on the screen with the entered number. \"%d\" is the format specifier for an integer.",
    "return-0-explanation":" — ends the program and returns 0, which usually indicates successful execution.",

    "stdlib.h":" - is a standard library in the C language that provides functions for performing general utility operations, including memory management, process control, conversions, and more. It is essential for tasks such as dynamic memory allocation, random number generation, and conversion between different data types.",
    "malloc-calloc-realloc-free-function":" — functions for dynamic memory allocation and deallocation.",
    "exit-function":" — terminates a program and can return an exit status.",
    "atoi-atof-strtol-strtod-function":" — functions for converting strings to integers or floating-point numbers.",
    "rand-srand-function":" — functions for generating random numbers.",
    "system-function":" — executes a system command.",
    "example-code-stdlib.h1":"Here is a simple example of a C program that uses the ",
    "example-code-stdlib.h2":" library to allocate memory dynamically and perform basic operations:",
    "stdlib.h-explanation":" — a preprocessor directive that includes the <stdlib.h> library, allowing the use of its functions in the program.",
    "int-array-explanation":" — declares a pointer \"array\" that will be used to point to a dynamically allocated integer array.",
    "int-size-explanation":" — declares a variable \"size\" to store the size of the array as input from the user.",
    "printf-enter-size-of-array-explanation":" — prompts the user to enter the size of the array.",
    "scanf-d-explanation":" — reads the \"size\" entered by the user and stores it in the size variable.",
    "array-int-malloc-explanation":" — dynamically allocates memory for an array of integers of the specified size. The \"malloc\" function returns a pointer to the allocated memory. The cast \"(int *)\" ensures that the pointer type matches.",
    "array-NULL-explanation":" — checks if memory allocation was successful. If \"malloc\" fails, it returns \"NULL\".",
    "printf-memory-explanation":" — outputs an error message if memory allocation fails.",
    "for-i-explanation":" — initializes a loop to fill the array with even numbers.",
    "array[i]-explanation":" — assigns the value of the even number to each element of the array.",
    "printf(array[d])-explanation":" — outputs the index and value of each element in the array.",
    "free(array)-explanation":" — releases the allocated memory back to the system to avoid memory leaks.",

    "string.h":" library is a standard library in the C language that provides functions for working with strings. It includes functions for string manipulation, comparison, copying, searching for substrings, and calculating string lengths.",
    "strlen-function":" — calculates the length of a string.",
    "strcpy-funtion":" — copies one string to another.",
    "strncpy-function":" — copies a specified number of characters from one string to another.",
    "strcat-function":" — concatenates (appends) one string to another.",
    "strcmp-function":" — compares two strings.",
    "strchr-function":" — searches for the first occurrence of a character in a string.",
    "strstr-function":" — searches for the first occurrence of a substring in a string.",
    "example-code-string.h1":"Here’s a simple example of a C program that uses the ",
    "example-code-string.h2":" library to work with strings:",
    "1.string.h":" — a preprocessor directive that includes the <string.h> library, allowing the use of its functions for string manipulation.",
    "2.string.h":" — declaration of character arrays for storing strings. The arrays are sized to hold up to 50 characters.",
    "3.string.h":" — prompts the user to enter the first string.",
    "4.string.h":" — reads a string from standard input (keyboard) and stores it in the array \"str1\".",
    "5.string.h":" — prompts the user to enter the second string.",
    "6.string.h":" — reads a string from standard input and stores it in the array \"str2\".",
    "7.string.h":" — removes the newline character from \"str1\" if it exists.",
    "8.string.h":" — removes the newline character from \"str2\" if it exists.",
    "9.string.h":" — compares the strings \"str1\" and \"str2\". The function returns 0 if the strings are equal, a negative value if \"str1\" is less than \"str2\", and a positive value if \"str1\" is greater than \"str2\".",
    "10.string.h":" — outputs the result of the string comparison.",
    "11.string.h":" — concatenates the strings \"str1\" and \"str2\", appending the contents of \"str2\" to the end of \"str1\".",
    "12.string.h":" — outputs the result of the concatenation.",
    "13.string.h":" — outputs the length of \"str1\".",

    "math.h":" library is a standard library in the C programming language that provides a wide range of mathematical functions. It includes functions for performing various mathematical calculations such as trigonometric functions, exponentiation, logarithmic functions, and other mathematical operations.",
    "sqrt-function":" — calculates the square root of a number.",
    "pow-function":" — raises a number to the power of another number.",
    "exp-function":" — calculates the exponential of a number.",
    "log-function":" — calculates the natural logarithm of a number.",
    "log10-function":" — calculates the base 10 logarithm of a number.",
    "sin-function":" — calculates the sine of an angle (in radians).",
    "cos-function":" — calculates the cosine of an angle (in radians).",
    "tan-function":" — calculates the tangent of an angle (in radians).",
    "fabs-function":" — computes the absolute value of a floating-point number.",
    "ceil-function":" — rounds a number up to the nearest integer.",
    "floor-function":" — rounds a number down to the nearest integer.",
    "example-code-math.h1":"Here’s a simple example of a C program that uses the ",
    "example-code-math.h2":" library to perform some mathematical calculations:",
    "1.math.h":" — a preprocessor directive that includes the <math.h> library, allowing the use of its mathematical functions.",
    "2.math.h":" — declaration of double variables to hold the input numbers and angle.",
    "3.math.h":" — prompts the user to enter a number.",
    "4.math.h":" — reads a double value from standard input and stores it in the variable \"num\".",
    "5.math.h":" — calculates the square root of \"num\" and prints it.",
    "6.math.h":" — prompts the user for a power value.",
    "7.math.h":" — calculates \"num\" raised to the power of \"power\" and prints the result.",
    "8.math.h":" — prompts the user for an angle in radians.",
    "9.math.h":" — calculate and print the sine, cosine, and tangent of the specified angle.",
    "10.math.h":" — computes and prints the absolute value of \"num\".",
    "11.math.h":" — calculates the natural logarithm of \"num\" and checks if \"num\" is positive before calculating to avoid errors.",

    "ctype.h":" library is a standard library in the C programming language that provides functions for working with characters. It includes functions to check what type a character belongs to (letter, digit, whitespace, etc.) and to convert character cases.",
    "isalpha-function":" — checks if a character is a letter (uppercase or lowercase in the Latin alphabet).",
    "isdigit-function":" — checks if a character is a digit.",
    "isalnum-function":" — checks if a character is either a letter or a digit.",
    "isspace-function":" — checks if a character is a whitespace (such as space, tab, newline).",
    "islower-function":" — checks if a character is a lowercase letter.",
    "isupper-function":" — checks if a character is an uppercase letter.",
    "tolower-function":" — converts a character to lowercase.",
    "toupper-function":" — converts a character to uppercase.",
    "example-code-ctype.h1":"Here is a simple example of a C program that uses the ",
    "example-code-ctype.h2":" library to check and transform characters:",
    "1.ctype.h":" — a preprocessor directive that includes the <ctype.h> library, allowing the use of its character-related functions.",
    "2.ctype.h":" — declares a \"char\" variable to store the character entered by the user.",
    "3.ctype.h":" — prompts the user to enter a character.",
    "4.ctype.h":" — reads a single character from standard input and stores it in \"ch\".",
    "5.ctype.h":" — checks if \"ch\" is a letter. If it is, the program outputs that it’s a letter.",
    "6.ctype.h":" — checks if ch is a digit. If it is, the program outputs that it’s a digit.",
    "7.ctype.h":" — check if \"ch\" is a lowercase or uppercase letter, respectively.",
    "8.ctype.h":" — converts \"ch\" to uppercase (if it is a lowercase letter).",
    "9.ctype.h":" — converts \"ch\" to lowercase (if it is an uppercase letter).",

    "limits.h":" is a standard C library that provides constants defining the ranges for various integer types, such as \"int\", \"char\", \"long\", etc. These constants allow programmers to access the minimum and maximum values a variable of a specific type can hold on a given system, which is crucial for writing cross-platform code or handling low-level operations.",
    "char_bit-function":" — number of bits in a \"char\".",
    "char_min&char_max-function":" — minimum and maximum values for type \"char\".",
    "schar_min&schar_max-function":" — minimum and maximum values for signed \"char\".",
    "uchar_max-function":" — maximum value for \"unsigned char\".",
    "shrt_min&shrt_max-function":" — minimum and maximum values for type \"short\".",
    "ushrt_max":" — maximum value for \"unsigned short\".",
    "int_min&int_max-function":" — minimum and maximum values for type \"int\".",
    "uint_max-function":" — maximum value for \"unsigned int\".",
    "long_min&lomg_max-function":" — minimum and maximum values for type \"long\".",
    "ulong_max-function":" — maximum value for \"unsigned long\".",
    "llong_min&llong_max-function":" — minimum and maximum values for type \"long long\".",
    "ullong_max-function":" — maximum value for \"unsigned long long\".",
    "example-code-limits.h1":"Here’s a C program that uses ",
    "example-code-limits.h2":" to display the range of values for various data types:",
    "1.limits.h":" — this preprocessor directive includes <limits.h>, giving access to constants that specify the range of values for various types.",
    "2.limits.h":" — these constants are used to print the minimum and maximum values a \"char\" can hold.",
    "3.limits.h":" — constants representing the minimum and maximum values for the \"signed char\" type.",
    "4.limits.h":" — provides the maximum value for \"unsigned char\", which can only hold positive values.",
    "5.limits.h":" — the minimum and maximum values for \"short\" and its unsigned counterpart, \"unsigned short\".",
    "6.limits.h":" — these constants define the minimum and maximum values for \"int\", which are platform-dependent (typically ranging from \"-2147483648\" to \"2147483647\").",
    "7.limits.h":" — the minimum and maximum values for \"long\" and \"unsigned long\".",
    "8.limits.h":" — similar constants for \"long long\" and \"unsigned long long\" types, used when higher precision is needed.",

    "float.h":" library in C provides various constants that define the properties and precision limits for floating-point types (\"float\", \"double\", and \"long double\"). These constants allow programmers to understand the range and precision limits for each floating-point type on a given system, which is essential for accurate numerical computations and writing portable code.",
    "flt_radix-function":" — the base (or radix) for the floating-point representation.",
    "flt_mant_dig&dbl_mant_dig&ldbl_mant_dig-function":" — number of significant digits in the mantissa for \"float\", \"double\", and \"long double\".",
    "flt_dig&dbl_dig&ldbl_dig-function":" — number of decimal digits that can be represented precisely by \"float\", \"double\", and \"long double\".",
    "flt_min&dbl_min&ldbl_min-function":" — the minimum positive value for \"float\", \"double\", and \"long double\".",
    "flt_max&dbl_max&ldbl_max-function":" — the maximum value for \"float\", \"double\", and \"long double\".",
    "flt_epsilon&dbl_epsilon&ldbl_epsilon-function":" — smallest positive value which, when added to 1.0, gives a result greater than 1.0 for each type.",
    "flt_min_exp&dbl_min_exp&ldbl_min_exp-function":" — minimum exponent for \"float\", \"double\", and \"long double\".",
    "flt_max_exp&dbl_max_exp&ldbl_max_exp":" — maximum exponent for \"float\", \"double\", and \"long double\".",
    "example-code-float.h1":"Below is an example program in C that uses ",
    "example-code-float.h2":" to display the characteristics of various floating-point data types:",
    "1.float.h":" — the directive #include <float.h> provides access to constants that define the range and precision of floating-point types.",
    "2.float.h":" — display the minimum and maximum range values for the \"float\" type.",
    "3.float.h":" — indicates the number of decimal digits that can be represented without losing precision in \"float\".",
    "4.float.h":" — the smallest value which, when added to 1.0, results in a number distinct from 1.0 for \"float\".",
    "5.float.h":" — the minimum and maximum range values for the \"double\" type.",
    "6.float.h":" — number of decimal digits of precision for the \"double\" type.",
    "7.float.h":" — analogous to \"FLT_EPSILON\", this is the smallest positive value that, when added to 1.0, changes the result for \"double\".",
    "8.float.h":" — minimum and maximum range values for the \"long double\" type.",
    "9.float.h":" — number of significant decimal digits for the \"long double\" type.",
    "10.float.h":" — smallest positive value for \"long double\" that affects the result when added to 1.0.",

    "stddef.h":" library in C provides several definitions that are essential for standard data types and memory management, allowing for more consistent and clear code across various systems. This library defines constants and types that help manage data alignment, memory offsets, and special data type values.",
    "null-function":" — a macro representing a null pointer constant, which is commonly used to signify that a pointer does not point to any valid memory address.",
    "size_t-function":" — an unsigned integer type that represents the size of any object in bytes, widely used for array indexing and loop counters.",
    "ptrdiff_t-funcrion":" — a signed integer type used for pointer arithmetic, particularly to store the difference between two pointers.",
    "offsetof-function":" — A macro that calculates the byte offset of a given member within a struct. This is useful for managing memory layout and aligning data in memory.",
    "example-code-stddef.h1":"Here is an example program that demonstrates the use of constants and types from ",
    "example-code-stddef.h2":":",
    "1.stddef.h":" - the pointer \"p\" is initialized to NULL, which means it points to no valid memory location. The if statement checks this, helping prevent errors like dereferencing an uninitialized pointer.",
    "2.stddef.h":" — the variable \"array_size is\" of type \"size_t\", ideal for non-negative values, especially when working with array indices. The \"%zu\" format specifier ensures correct output for \"size_t\" values.",
    "3.stddef.h":" — the diff variable holds the difference between two pointers within an array, measuring the number of elements between \"&arr[5]\" and \"&arr[0]\". \"ptrdiff_t\" helps with safe pointer arithmetic.",
    "4.stddef.h":" — the offsetof macro calculates the byte offset of \"value\" within \"MyStruct\", which is often used in low-level programming to manage struct memory layout.",

    "key-definition":"Key Definitions of ",
    "stdint.h":" library in C provides fixed-width integer types, helping developers write more portable code by defining exact-width integer types and associated limits. This library is especially useful for systems programming, embedded systems, and any applications where exact control over data size and limits is essential.",
    "stdint.h-key-definition-head-1":"Exact-width integer types: ",
    "stdint.h-key-definition-text-1":"These types guarantee integer sizes across different systems, making code more predictable and compatible across platforms.",
    "stdint.h-key-definition-head-2":"Minimum-width integer types: ",
    "stdint.h-key-definition-text-2":"These types provide at least a specified width, which can be useful in systems where minimum size matters but the exact width may vary.",
    "stdint.h-key-definition-head-3":"Fast integer types: ",
    "stdint.h-key-definition-text-3":"These types provide the fastest integer types available with at least the specified width, optimizing performance on certain hardware.",
    "stdint.h-key-definition-head-4":"Integer types capable of holding object pointers: ",
    "stdint.h-key-definition-head-5":"Maximum-width integer types: ",
    "stdint.h-key-definition-text-5":"Provides the widest integer types available.",
    "stdint.h-key-definition-head-6":"Macros for integer limits: ",
    "stdint.h-key-definition-text-6":"These macros define the limits (min and max values) for each type provided by <stdint.h>. Examples include \"INT8_MAX\", \"INT32_MIN\", \"UINT64_MAX\", and so on, which make code more readable and safer.",
    "stdint.h-text-for-definition-1-1":" — signed integer types of 8, 16, 32, and 64 bits, respectively.",
    "stdint.h-text-for-definition-1-2":" — unsigned integer types of 8, 16, 32, and 64 bits, respectively.",
    "stdint.h-text-for-definition-2-1":" — signed minimum-width integer types.",
    "stdint.h-text-for-definition-2-2":" — unsigned minimum-width integer types.",
    "stdint.h-text-for-definition-3-1":" — signed fast integer types.",
    "stdint.h-text-for-definition-3-2":" — unsigned fast integer types.",
    "stdint.h-text-for-definition-4-1":" — integer types guaranteed to be able to store a pointer. This is useful for converting pointers to integer types and vice versa.",
    "stdint.h-text-for-definition-5-1":" — signed and unsigned integer types with the maximum width.",
    "example-code-stdint.h1":"Here's a program that demonstrates the use of types and constants from ",
    "example-code-stdint.h2":":",
    "name.1.stdint.h":"Exact-width integer types: ",
    "name.2.stdint.h":"Minimum-width integer types: ",
    "name.3.stdint.h":"Maximum-width integer types: ",
    "name.4.stdint.h":"Limit macros ",
    "1.stdint.h":"\"small_number\" uses \"int8_t\", an 8-bit signed integer. This guarantees that \"small_number\" always takes exactly 8 bits, regardless of the platform.",
    "2.stdint.h":"\"large_number\" uses \"int_least32_t\", a type that ensures at least 32 bits, even though it may have more bits on some systems.",
    "3.stdint.h":"\"max_signed\" and \"max_unsigned\" use \"intmax_t\" and \"uintmax_t\", which provide the widest signed and unsigned integer types available on the system. This is particularly useful for managing very large numbers.",
    "4.stdint.h":"Constants like \"INTMAX_MAX\" and \"UINTMAX_MAX\" represent the maximum values for \"intmax_t\" and \"uintmax_t\", respectively. This helps write safe code that is protected against integer overflow.",

    "stdbool":" library in C provides standard definitions for handling boolean values. While C initially did not have a built-in boolean data type, starting with C99, this library enables the use of \"true\" and \"false\" to represent logical values, making code more readable and portable.",
    "stdbool.h-key-definition-head-1":"Type ",
    "stdbool.h-key-definition-text-1":" A boolean data type, which is an alias for the integer type \"_Bool\" (a built-in type in C). It’s used to store logical values.",
    "stdbool.h-key-definition-head-2":"Constants ",
    "stdbool.h-key-definition-head-3":"Ease of Use: ",
    "stdbool.h-key-definition-text-3":"By including <stdbool.h>, you can work with boolean values similarly to other programming languages, which makes the code more intuitive.",
    "stdbool.h-text-for-definition-2-1":" — represents logical truth, equivalent to the integer value \"1\".",
    "stdbool.h-text-for-definition-2-2":" — represents logical falsehood, equivalent to the integer value \"0\".",
    "example-code-stdbool.h1":"Here's a program that demonstrates the use of types and constants from ",
    "example-code-stdool.h2":":",
    "name.1.stdbool.h":"Type ",
    "name.2.stdbool.h":"Constants ",
    "name.3.stdbool.h":"Conditional Check with Boolean Values: ",
    "1.stdbool.h":" The variable \"is_even\" is declared as type \"bool\", making it clear that this variable is intended to hold a logical value.",
    "2.stdbool.h":" Boolean variables can be assigned values of \"true\" or \"false\". In this example, \"is_even\" is set to \"true\" if the number is even.",
    "3.stdbool.h":" The \"if\" condition checks the value of \"is_even\", which allows the program to display the correct message about the number. This enhances readability compared to using \"1\" and \"0\".",
    
    "introduction":"Introduction",

    "data-types-router":"Data Types",

    "data-types":"In the C programming language, data types define what values a variable can hold and what operations can be performed on it. The primary categories include integer types, floating-point types, character types, and special types.",
    "integer-types":"Integer Types",
    "integer-types-description":"Integer types are used to store whole numbers (without a decimal point).",
    "int-description":" the standard integer type, typically 4 bytes, though size can vary by system.",
    "short-description":" used for smaller integer values, takes up less memory.",
    "long-description":" for larger integer values.",
    "unsigned-description":" stores only positive values (e.g., \"unsigned int\").",
    "floating-point-types":"Floating-Point Types",
    "floating-point-types-description":"Floating-point types are used to store decimal numbers (numbers with a fractional part).",
    "float-description":" single-precision, typically 4 bytes with about 7 decimal places of precision.",
    "double-description":" double-precision, usually 8 bytes with about 15 decimal places.",
    "long-double-description":" for even higher precision (size depends on the system).",
    "character-types":"Character Types",
    "character-types-description":"The char data type is used to store single characters, like letters and digits.",
    "char-description":" usually 1 byte, stores characters and small integer values.",
    "unsigned-and-signed-char-description":" used for characters with specific ranges, allowing positive or negative values.",
    "special-data-types":"Special Data Types",
    "void-description":" represents the absence of a value, often used for functions that do not return anything.",
    "bool-description":" stores boolean values \"true\" (1) or \"false\" (0).",
    "summary-data-types":"Summary",
    "summary-data-types-description":"Data types in C define what values a variable can hold and which operations are possible. For instance, \"int\", \"float\", and \"double\" are used for numerical operations, \"char\" for characters, and \"_Bool\" for boolean values.",

    "hello-world-router":"\"Hello World\"",

    "hello-world-":"Here is the simple \"Hello, World!\" program in C:",
    "course-stdio.h":" - this line includes the standard input/output library, which provides the \"printf\" function used for output.",
    "course-int-main":" — the main function of the program where execution starts.",
    "course-printf-helloworld":" — this function prints the string \"Hello, World!\" to the screen. The \"\n\" is a special character that creates a new line after the message.",
    "course-return-0":" — this statement ends the \"main\" function and returns 0 to the operating system, indicating that the program completed successfully.",
    "output":"Output",

    "loop-router":"Loops",
    "loop-desc":"Loops in C are structures that allow you to repeat a block of code multiple times. There are three main types of loops in C:",
    "the-loop":"The Loop",
    "for-description":" loop is used when you know in advance how many times you need to repeat the block of code. The structure of a \"for\" loop looks like this:",
    "initialization-description":" — executed once before the loop starts (usually used to initialize a counter variable).",
    "condition-description":" — checked before every iteration. If it's true (non-zero), the loop continues.",
    "counter_update-description":" — executed after each iteration, usually used to modify the loop counter.",
    "example-loops":"Example:",
    "explanation-loops":"Explanation:",
    "explanation-example-for-1":" The \"for\" loop starts with \"i = 1\".",
    "explanation-example-for-2":" The loop continues as long as \"i\" is less than or equal to 5.",
    "explanation-example-for-3":" After each iteration, \"i\" is incremented by 1.",
    "explanation-example-for-4":" The result of the program will print numbers from 1 to 5.",
    "while-description":" continues to execute a block of code as long as the condition is true. The condition is checked before each iteration. The structure of a \"while\" loop looks like this:",
    "explanation-example-while-1":" The initial value of \"i\" is 1.",
    "explanation-example-while-2":" The loop continues as long as \"i\" is less than or equal to 5.",
    "explanation-example-while-3":" In each iteration, \"i\" is printed, and then \"i\" is incremented by 1.",
    "explanation-example-while-4":" The result of the program will print numbers from 1 to 5.",
    "do_while-description":" loop executes the block of code at least once, and then continues to repeat the block as long as the condition is true. The key difference between \"do...while\" and \"while\" is that the condition is checked after the loop body is executed, so the loop runs at least once. The structure of a \"do...while\" loop looks like this:",
    "explanation-example-do_while-1":"The loop always executes at least once, even if \"i\" is initially greater than 5.",
    "explanation-example-do_while-2":"In the first iteration, \"i\" is 1, and it is printed.",
    "explanation-example-do_while-3":"After executing the loop body, the condition is checked, and the loop repeats if \"i\" is still less than or equal to 5.",
    "explanation-example-do_while-4":"The output will print numbers from 1 to 5.",

    "arrays":"Arrays",
    "arrays-description":"Arrays in C are a data structure that allows you to store multiple values of the same type in one place. They’re useful when you need to work with a group of elements (like numbers, strings, or characters) because arrays make it easy to perform the same operations on each element.",
    "key-points-arrays":"Key Points About Arrays:",
    "data-type-arrays":"Data Type:",
    "data-type-arrays-desc":" All elements in an array must be of the same type (e.g., all integers or all characters).",
    "array-size-arrays":"Array Size:",
    "array-size-arrays-desc":" The size of an array is fixed upon creation and cannot be changed.",
    "indexing-arrays":"Indexing:",
    "indexing-arrays-desc":" Each element in an array has an index, starting from 0 (the first element is at index 0, the second is at index 1, and so on).",
    "declare-and-initializing":"Declaring and Initializing an Array",
    "declare-and-initializing-description":"To declare an array, you need to specify the data type, the array name, and its size in square brackets.",
    "syntax":"Syntax:",
    "example":"Example:",
    "arrays-example-1-description":"Here, \"int\" is the data type, \"numbers\" is the array name, and \"[5]\" specifies the size (it can hold 5 integers).",
    "initializing-an-array":"Initializing an Array",
    "initializing-an-array-description":"You can initialize an array with values when declaring it. Values are specified in curly braces \"{}\".",
    "arrays-example-2-description":"Here, each element in the array is given a value: numbers[0] = 1, numbers[1] = 2, and so on.",
    "accessing-array-elements":"Accessing Array Elements",
    "accessing-array-elements-description":"You can access elements in an array using their index, which indicates the element’s position. Indexes start at zero (0), and the last element is at array_size - 1.",
    "modifying-array-values":"Modifying Array Values",
    "modifying-array-values-description":"You can modify the values of array elements by accessing them through their index.",
    "arrays-example-3-description":"In this case, the value of \"numbers[1]\" is changed from 20 to 50.",
    "using-loops-with-arrays":"Using Loops with Arrays",
    "using-loops-with-arrays-description":"Loops allow you to efficiently work with each element of an array. This is helpful if you want to perform the same action on all elements in the array.",
    "using-loops-with-arrays-explanation-1":"The \"for\" loop iterates from 0 to 4 (5 iterations in total).",
    "using-loops-with-arrays-explanation-2":"During each iteration, the element \"numbers[i]\" is added to the variable \"sum\".",
    "using-loops-with-arrays-explanation-3":"At the end, \"sum\" contains the total of all elements in the array.",
    "character-arrays(strings)":"Character Arrays (Strings)",
    "character-arrays(strings)-description":"Character arrays in C can be used to work with strings. A string in C is a character array that ends with a null character \"\\0\".",
    "arrays-example-4-description":"Here, the array greeting holds the characters \"H\", \"e\", \"l\", \"l\", \"o\", and ends with the null character \\0, which marks the end of the string.",
    "finding-maximum-in-an-array":"Example Program: Finding the Maximum Element in an Array",
    "finding-maximum-in-an-array-description":"Here’s a program that finds the maximum value in an array:",
    "finding-maximum-in-an-array-explanation-1":"Initially, \"max\" is set to the first element of the array.",
    "finding-maximum-in-an-array-explanation-2":"The \"for\" loop iterates through each element, comparing it with \"max\".",
    "finding-maximum-in-an-array-explanation-3":"If an element is larger than \"max\", we update \"max\".",
    "finding-maximum-in-an-array-explanation-4":"At the end, \"max\" contains the highest value in the array."

}

